package com.haroot.pokebot.tools;
/*
Copyright 2020 Twitter, Inc.
SPDX-License-Identifier: Apache-2.0

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
https://openapi-generator.tech
Do not edit the class manually.
*/

import java.util.Scanner;

import org.springframework.stereotype.Component;

import com.github.scribejava.core.model.OAuth2AccessToken;
import com.github.scribejava.core.pkce.PKCE;
import com.github.scribejava.core.pkce.PKCECodeChallengeMethod;
import com.haroot.pokebot.config.ResourcePathConfig;
import com.haroot.pokebot.config.UserInfoConfig;
import com.haroot.pokebot.dto.TokenDto;
import com.haroot.pokebot.utils.MapperUtils;
import com.twitter.clientlib.TwitterCredentialsOAuth2;
import com.twitter.clientlib.auth.TwitterOAuth20Service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

/**
 * 新規AccessToken取得(Javaプログラム)
 *
 * @author haroot
 *
 */
@Component
@RequiredArgsConstructor
@Slf4j
public class OAuth20GetAccessToken {
	private final ResourcePathConfig resourcePathConfig;
	private final UserInfoConfig userInfoConfig;

	public void getToken() {
		log.info("start getting token.");
		// read token file
		TokenDto tokenDto = MapperUtils.readJson(resourcePathConfig.getToken(), TokenDto.class);
		if (tokenDto == null) {
			return;
		}
		TwitterCredentialsOAuth2 credentials = new TwitterCredentialsOAuth2(userInfoConfig.getClientId(),
				userInfoConfig.getClientSecret(), tokenDto.getAccessToken(), tokenDto.getRefreshToken());

		OAuth2AccessToken accessToken = getAccessToken(credentials);
		if (accessToken == null) {
			log.info("token is null");
			return;
		}

		// Setting the access & refresh tokens into TwitterCredentialsOAuth2
		credentials.setTwitterOauth2AccessToken(accessToken.getAccessToken());
		credentials.setTwitterOauth2RefreshToken(accessToken.getRefreshToken());
		log.info("end getting token.");
	}

	public OAuth2AccessToken getAccessToken(TwitterCredentialsOAuth2 credentials) {
		TwitterOAuth20Service service = new TwitterOAuth20Service(credentials.getTwitterOauth2ClientId(),
				credentials.getTwitterOAuth2ClientSecret(), userInfoConfig.getRedirectUrl(),
				userInfoConfig.getAccessScope());

		OAuth2AccessToken accessToken = null;
		try (final Scanner in = new Scanner(System.in, "UTF-8");) {
			log.info("Fetching the Authorization URL...");

			final String secretState = "state";
			PKCE pkce = new PKCE();
			pkce.setCodeChallenge("challenge");
			pkce.setCodeChallengeMethod(PKCECodeChallengeMethod.PLAIN);
			pkce.setCodeVerifier("challenge");
			String authorizationUrl = service.getAuthorizationUrl(pkce, secretState);

			log.info("Go to the Authorization URL and authorize your App:\n" + authorizationUrl
					+ "\nAfter that paste the authorization code here\n>>");
			final String code = in.nextLine();
			log.info("\nTrading the Authorization Code for an Access Token...");
			accessToken = service.getAccessToken(pkce, code);

			log.info("Access token: " + accessToken.getAccessToken());
			log.info("Refresh token: " + accessToken.getRefreshToken());
		} catch (

		Exception ex) {
			log.error("Error while getting the access token:\n " + ex);
			log.error(ex.getMessage(), ex);
		}
		return accessToken;
	}
}
